// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-4-gd72b68b7-dirty
#include <stan/model/model_header.hpp>
namespace model_nbhd_glmm_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'nbhd_glmm', line 37, column 4 to column 18)",
                                                      " (in 'nbhd_glmm', line 38, column 4 to column 19)",
                                                      " (in 'nbhd_glmm', line 39, column 4 to column 23)",
                                                      " (in 'nbhd_glmm', line 40, column 4 to column 21)",
                                                      " (in 'nbhd_glmm', line 56, column 4 to column 31)",
                                                      " (in 'nbhd_glmm', line 58, column 4 to column 59)",
                                                      " (in 'nbhd_glmm', line 44, column 15 to column 16)",
                                                      " (in 'nbhd_glmm', line 44, column 8 to column 63)",
                                                      " (in 'nbhd_glmm', line 45, column 8 to column 29)",
                                                      " (in 'nbhd_glmm', line 46, column 8 to column 26)",
                                                      " (in 'nbhd_glmm', line 43, column 21 to line 47, column 5)",
                                                      " (in 'nbhd_glmm', line 43, column 4 to line 47, column 5)",
                                                      " (in 'nbhd_glmm', line 48, column 4 to column 37)",
                                                      " (in 'nbhd_glmm', line 49, column 4 to column 51)",
                                                      " (in 'nbhd_glmm', line 51, column 4 to column 27)",
                                                      " (in 'nbhd_glmm', line 52, column 4 to column 23)",
                                                      " (in 'nbhd_glmm', line 8, column 4 to column 19)",
                                                      " (in 'nbhd_glmm', line 9, column 10 to column 11)",
                                                      " (in 'nbhd_glmm', line 9, column 4 to column 13)",
                                                      " (in 'nbhd_glmm', line 10, column 4 to column 19)",
                                                      " (in 'nbhd_glmm', line 11, column 11 to column 12)",
                                                      " (in 'nbhd_glmm', line 11, column 14 to column 15)",
                                                      " (in 'nbhd_glmm', line 11, column 4 to column 19)",
                                                      " (in 'nbhd_glmm', line 13, column 4 to column 22)",
                                                      " (in 'nbhd_glmm', line 14, column 20 to column 21)",
                                                      " (in 'nbhd_glmm', line 14, column 4 to column 23)",
                                                      " (in 'nbhd_glmm', line 15, column 4 to column 24)",
                                                      " (in 'nbhd_glmm', line 16, column 4 to column 29)",
                                                      " (in 'nbhd_glmm', line 17, column 4 to column 19)",
                                                      " (in 'nbhd_glmm', line 20, column 4 to column 19)",
                                                      " (in 'nbhd_glmm', line 21, column 11 to column 12)",
                                                      " (in 'nbhd_glmm', line 21, column 14 to column 16)",
                                                      " (in 'nbhd_glmm', line 21, column 4 to column 21)",
                                                      " (in 'nbhd_glmm', line 22, column 11 to column 13)",
                                                      " (in 'nbhd_glmm', line 22, column 4 to column 23)",
                                                      " (in 'nbhd_glmm', line 24, column 11 to column 12)",
                                                      " (in 'nbhd_glmm', line 24, column 14 to column 16)",
                                                      " (in 'nbhd_glmm', line 24, column 4 to column 21)",
                                                      " (in 'nbhd_glmm', line 25, column 11 to column 13)",
                                                      " (in 'nbhd_glmm', line 25, column 15 to column 17)",
                                                      " (in 'nbhd_glmm', line 25, column 4 to column 22)",
                                                      " (in 'nbhd_glmm', line 26, column 11 to column 13)",
                                                      " (in 'nbhd_glmm', line 26, column 15 to column 17)",
                                                      " (in 'nbhd_glmm', line 26, column 4 to column 26)",
                                                      " (in 'nbhd_glmm', line 28, column 8 to column 38)",
                                                      " (in 'nbhd_glmm', line 29, column 8 to column 46)",
                                                      " (in 'nbhd_glmm', line 27, column 19 to line 30, column 5)",
                                                      " (in 'nbhd_glmm', line 27, column 4 to line 30, column 5)",
                                                      " (in 'nbhd_glmm', line 32, column 4 to column 37)",
                                                      " (in 'nbhd_glmm', line 33, column 4 to column 37)",
                                                      " (in 'nbhd_glmm', line 34, column 4 to column 25)",
                                                      " (in 'nbhd_glmm', line 37, column 11 to column 13)",
                                                      " (in 'nbhd_glmm', line 40, column 11 to column 15)",
                                                      " (in 'nbhd_glmm', line 56, column 11 to column 13)",
                                                      " (in 'nbhd_glmm', line 4, column 8 to column 32)",
                                                      " (in 'nbhd_glmm', line 3, column 29 to line 5, column 5)"};
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
cloglog(const T0__& p_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& p = to_ref(p_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 55;
    return stan::math::log(minus(stan::math::log(subtract(1, p))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct cloglog_functor__ {
template <typename T0__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& p, std::ostream* pstream__)  const 
{
return cloglog(p, pstream__);
}
};
#include <stan_meta_header.hpp>
class model_nbhd_glmm final : public model_base_crtp<model_nbhd_glmm> {
private:
  int N;
  std::vector<int> Y;
  int K;
  Eigen::Matrix<double, -1, -1> X;
  int N_id;
  std::vector<int> id;
  double bQ_prior_scale;
  int bQ_prior_df;
  int prior_only;
  int Kc;
  Eigen::Matrix<double, -1, -1> Xc;
  Eigen::Matrix<double, -1, 1> means_X;
  Eigen::Matrix<double, -1, -1> XQ;
  Eigen::Matrix<double, -1, -1> XR;
  Eigen::Matrix<double, -1, -1> XR_inv;
 
public:
  ~model_nbhd_glmm() { }
  
  inline std::string model_name() const final { return "model_nbhd_glmm"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-4-gd72b68b7-dirty", "stancflags = "};
  }
  
  
  model_nbhd_glmm(stan::io::var_context& context__,
                  unsigned int random_seed__ = 0,
                  std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_nbhd_glmm_namespace::model_nbhd_glmm";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 17;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 17;
      current_statement__ = 17;
      check_greater_or_equal(function__, "N", N, 1);
      current_statement__ = 18;
      validate_non_negative_index("Y", "N", N);
      current_statement__ = 19;
      context__.validate_dims("data initialization","Y","int",
          context__.to_vec(N));
      Y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 19;
      assign(Y, nil_index_list(), context__.vals_i("Y"),
        "assigning variable Y");
      current_statement__ = 20;
      context__.validate_dims("data initialization","K","int",
          context__.to_vec());
      K = std::numeric_limits<int>::min();
      
      current_statement__ = 20;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 20;
      current_statement__ = 20;
      check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 21;
      validate_non_negative_index("X", "N", N);
      current_statement__ = 22;
      validate_non_negative_index("X", "K", K);
      current_statement__ = 23;
      context__.validate_dims("data initialization","X","double",
          context__.to_vec(N, K));
      X = Eigen::Matrix<double, -1, -1>(N, K);
      stan::math::fill(X, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_flat__;
        current_statement__ = 23;
        assign(X_flat__, nil_index_list(), context__.vals_r("X"),
          "assigning variable X_flat__");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= N; ++sym2__) {
            current_statement__ = 23;
            assign(X,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_flat__[(pos__ - 1)], "assigning variable X");
            current_statement__ = 23;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 24;
      context__.validate_dims("data initialization","N_id","int",
          context__.to_vec());
      N_id = std::numeric_limits<int>::min();
      
      current_statement__ = 24;
      N_id = context__.vals_i("N_id")[(1 - 1)];
      current_statement__ = 24;
      current_statement__ = 24;
      check_greater_or_equal(function__, "N_id", N_id, 1);
      current_statement__ = 25;
      validate_non_negative_index("id", "N", N);
      current_statement__ = 26;
      context__.validate_dims("data initialization","id","int",
          context__.to_vec(N));
      id = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 26;
      assign(id, nil_index_list(), context__.vals_i("id"),
        "assigning variable id");
      current_statement__ = 26;
      for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
        current_statement__ = 26;
        current_statement__ = 26;
        check_greater_or_equal(function__, "id[sym1__]", id[(sym1__ - 1)], 1);
      }
      current_statement__ = 27;
      context__.validate_dims("data initialization","bQ_prior_scale",
          "double",context__.to_vec());
      bQ_prior_scale = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 27;
      bQ_prior_scale = context__.vals_r("bQ_prior_scale")[(1 - 1)];
      current_statement__ = 28;
      context__.validate_dims("data initialization","bQ_prior_df","int",
          context__.to_vec());
      bQ_prior_df = std::numeric_limits<int>::min();
      
      current_statement__ = 28;
      bQ_prior_df = context__.vals_i("bQ_prior_df")[(1 - 1)];
      current_statement__ = 28;
      current_statement__ = 28;
      check_greater_or_equal(function__, "bQ_prior_df", bQ_prior_df, 1);
      current_statement__ = 29;
      context__.validate_dims("data initialization","prior_only","int",
          context__.to_vec());
      prior_only = std::numeric_limits<int>::min();
      
      current_statement__ = 29;
      prior_only = context__.vals_i("prior_only")[(1 - 1)];
      current_statement__ = 30;
      Kc = std::numeric_limits<int>::min();
      
      current_statement__ = 30;
      Kc = (K - 1);
      current_statement__ = 31;
      validate_non_negative_index("Xc", "N", N);
      current_statement__ = 32;
      validate_non_negative_index("Xc", "Kc", Kc);
      current_statement__ = 33;
      Xc = Eigen::Matrix<double, -1, -1>(N, Kc);
      stan::math::fill(Xc, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 34;
      validate_non_negative_index("means_X", "Kc", Kc);
      current_statement__ = 35;
      means_X = Eigen::Matrix<double, -1, 1>(Kc);
      stan::math::fill(means_X, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 36;
      validate_non_negative_index("XQ", "N", N);
      current_statement__ = 37;
      validate_non_negative_index("XQ", "Kc", Kc);
      current_statement__ = 38;
      XQ = Eigen::Matrix<double, -1, -1>(N, Kc);
      stan::math::fill(XQ, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 39;
      validate_non_negative_index("XR", "Kc", Kc);
      current_statement__ = 40;
      validate_non_negative_index("XR", "Kc", Kc);
      current_statement__ = 41;
      XR = Eigen::Matrix<double, -1, -1>(Kc, Kc);
      stan::math::fill(XR, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 42;
      validate_non_negative_index("XR_inv", "Kc", Kc);
      current_statement__ = 43;
      validate_non_negative_index("XR_inv", "Kc", Kc);
      current_statement__ = 44;
      XR_inv = Eigen::Matrix<double, -1, -1>(Kc, Kc);
      stan::math::fill(XR_inv, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 48;
      for (int i = 2; i <= K; ++i) {
        current_statement__ = 45;
        assign(means_X, cons_list(index_uni((i - 1)), nil_index_list()),
          mean(
            rvalue(X,
              cons_list(index_omni(),
                cons_list(index_uni(i), nil_index_list())), "X")),
          "assigning variable means_X");
        current_statement__ = 46;
        assign(Xc,
          cons_list(index_omni(),
            cons_list(index_uni((i - 1)), nil_index_list())),
          subtract(
            rvalue(X,
              cons_list(index_omni(),
                cons_list(index_uni(i), nil_index_list())), "X"),
            means_X[((i - 1) - 1)]), "assigning variable Xc");}
      current_statement__ = 49;
      assign(XQ, nil_index_list(),
        multiply(qr_thin_Q(Xc), stan::math::sqrt((N - 1))),
        "assigning variable XQ");
      current_statement__ = 50;
      assign(XR, nil_index_list(),
        divide(qr_thin_R(Xc), stan::math::sqrt((N - 1))),
        "assigning variable XR");
      current_statement__ = 51;
      assign(XR_inv, nil_index_list(), inverse(XR),
        "assigning variable XR_inv");
      current_statement__ = 52;
      validate_non_negative_index("bQ", "Kc", Kc);
      current_statement__ = 53;
      validate_non_negative_index("z_1", "N_id", N_id);
      current_statement__ = 54;
      validate_non_negative_index("b", "Kc", Kc);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += Kc;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += N_id;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_nbhd_glmm_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> bQ;
      bQ = Eigen::Matrix<local_scalar_t__, -1, 1>(Kc);
      stan::math::fill(bQ, DUMMY_VAR__);
      
      current_statement__ = 1;
      bQ = in__.vector(Kc);
      local_scalar_t__ Intercept;
      Intercept = DUMMY_VAR__;
      
      current_statement__ = 2;
      Intercept = in__.scalar();
      local_scalar_t__ sd_1;
      sd_1 = DUMMY_VAR__;
      
      current_statement__ = 3;
      sd_1 = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        sd_1 = stan::math::lb_constrain(sd_1, 0, lp__);
      } else {
        current_statement__ = 3;
        sd_1 = stan::math::lb_constrain(sd_1, 0);
      }
      Eigen::Matrix<local_scalar_t__, -1, 1> z_1;
      z_1 = Eigen::Matrix<local_scalar_t__, -1, 1>(N_id);
      stan::math::fill(z_1, DUMMY_VAR__);
      
      current_statement__ = 4;
      z_1 = in__.vector(N_id);
      {
        current_statement__ = 12;
        if (logical_negation(prior_only)) {
          current_statement__ = 7;
          validate_non_negative_index("mu", "N", N);
          Eigen::Matrix<local_scalar_t__, -1, 1> mu;
          mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
          stan::math::fill(mu, DUMMY_VAR__);
          
          current_statement__ = 8;
          assign(mu, nil_index_list(),
            add(add(Intercept, multiply(XQ, bQ)),
              multiply((20.0 * sd_1),
                rvalue(z_1, cons_list(index_multi(id), nil_index_list()),
                  "z_1"))), "assigning variable mu");
          current_statement__ = 9;
          assign(mu, nil_index_list(),
            inv_cloglog(stan::model::deep_copy(mu)), "assigning variable mu");
          current_statement__ = 10;
          lp_accum__.add(bernoulli_lpmf<propto__>(Y, mu));
        } 
        current_statement__ = 13;
        lp_accum__.add(student_t_lpdf<propto__>(Intercept, 3, 0, 2.5));
        current_statement__ = 14;
        lp_accum__.add(
          student_t_lpdf<propto__>(bQ, bQ_prior_df, 0, bQ_prior_scale));
        current_statement__ = 15;
        lp_accum__.add(gamma_lpdf<propto__>(sd_1, 2.0, 2.0));
        current_statement__ = 16;
        lp_accum__.add(std_normal_lpdf<propto__>(z_1));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_nbhd_glmm_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> bQ;
      bQ = Eigen::Matrix<double, -1, 1>(Kc);
      stan::math::fill(bQ, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      bQ = in__.vector(Kc);
      double Intercept;
      Intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      Intercept = in__.scalar();
      double sd_1;
      sd_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sd_1 = in__.scalar();
      current_statement__ = 3;
      sd_1 = stan::math::lb_constrain(sd_1, 0);
      Eigen::Matrix<double, -1, 1> z_1;
      z_1 = Eigen::Matrix<double, -1, 1>(N_id);
      stan::math::fill(z_1, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      z_1 = in__.vector(N_id);
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        vars__.emplace_back(bQ[(sym1__ - 1)]);}
      vars__.emplace_back(Intercept);
      vars__.emplace_back(sd_1);
      for (int sym1__ = 1; sym1__ <= N_id; ++sym1__) {
        vars__.emplace_back(z_1[(sym1__ - 1)]);}
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> b;
      b = Eigen::Matrix<double, -1, 1>(Kc);
      stan::math::fill(b, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      assign(b, nil_index_list(), multiply(XR_inv, bQ),
        "assigning variable b");
      double b_Intercept;
      b_Intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      b_Intercept = (Intercept - dot_product(means_X, b));
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        vars__.emplace_back(b[(sym1__ - 1)]);}
      vars__.emplace_back(b_Intercept);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> bQ;
      bQ = Eigen::Matrix<double, -1, 1>(Kc);
      stan::math::fill(bQ, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> bQ_flat__;
        current_statement__ = 1;
        assign(bQ_flat__, nil_index_list(), context__.vals_r("bQ"),
          "assigning variable bQ_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
          current_statement__ = 1;
          assign(bQ, cons_list(index_uni(sym1__), nil_index_list()),
            bQ_flat__[(pos__ - 1)], "assigning variable bQ");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      double Intercept;
      Intercept = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      Intercept = context__.vals_r("Intercept")[(1 - 1)];
      double sd_1;
      sd_1 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sd_1 = context__.vals_r("sd_1")[(1 - 1)];
      double sd_1_free__;
      sd_1_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      sd_1_free__ = stan::math::lb_free(sd_1, 0);
      Eigen::Matrix<double, -1, 1> z_1;
      z_1 = Eigen::Matrix<double, -1, 1>(N_id);
      stan::math::fill(z_1, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> z_1_flat__;
        current_statement__ = 4;
        assign(z_1_flat__, nil_index_list(), context__.vals_r("z_1"),
          "assigning variable z_1_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_id; ++sym1__) {
          current_statement__ = 4;
          assign(z_1, cons_list(index_uni(sym1__), nil_index_list()),
            z_1_flat__[(pos__ - 1)], "assigning variable z_1");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        vars__.emplace_back(bQ[(sym1__ - 1)]);}
      vars__.emplace_back(Intercept);
      vars__.emplace_back(sd_1_free__);
      for (int sym1__ = 1; sym1__ <= N_id; ++sym1__) {
        vars__.emplace_back(z_1[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("bQ");
    names__.emplace_back("Intercept");
    names__.emplace_back("sd_1");
    names__.emplace_back("z_1");
    names__.emplace_back("b");
    names__.emplace_back("b_Intercept");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kc)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_id)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(Kc)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bQ" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "sd_1");
    for (int sym1__ = 1; sym1__ <= N_id; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_1" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "b_Intercept");
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "bQ" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "Intercept");
    param_names__.emplace_back(std::string() + "sd_1");
    for (int sym1__ = 1; sym1__ <= N_id; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "z_1" + '.' + std::to_string(sym1__));
      }}
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= Kc; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "b" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "b_Intercept");
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"bQ\",\"type\":{\"name\":\"vector\",\"length\":" << Kc << "},\"block\":\"parameters\"},{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_1\",\"type\":{\"name\":\"vector\",\"length\":" << N_id << "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << Kc << "},\"block\":\"generated_quantities\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"bQ\",\"type\":{\"name\":\"vector\",\"length\":" << Kc << "},\"block\":\"parameters\"},{\"name\":\"Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_1\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_1\",\"type\":{\"name\":\"vector\",\"length\":" << N_id << "},\"block\":\"parameters\"},{\"name\":\"b\",\"type\":{\"name\":\"vector\",\"length\":" << Kc << "},\"block\":\"generated_quantities\"},{\"name\":\"b_Intercept\",\"type\":{\"name\":\"real\"},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_nbhd_glmm_namespace::model_nbhd_glmm;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nbhd_glmm_namespace::profiles__;
}
#endif
#endif
