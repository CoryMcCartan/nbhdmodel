// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_nbhd_glmm_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_nbhd_glmm");
    reader.add_event(67, 65, "end", "model_nbhd_glmm");
    return reader;
}
template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
cloglog(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& p, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        current_statement_begin__ = 4;
        return stan::math::promote_scalar<fun_return_scalar_t__>(stan::math::log(minus(stan::math::log(subtract(1, p)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct cloglog_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& p, std::ostream* pstream__) const {
        return cloglog(p, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_nbhd_glmm
  : public stan::model::model_base_crtp<model_nbhd_glmm> {
private:
        int N;
        std::vector<int> Y;
        int K;
        matrix_d X;
        int N_id;
        std::vector<int> id;
        double bQ_prior_scale;
        int bQ_prior_df;
        int prior_only;
        int Kc;
        matrix_d Xc;
        vector_d means_X;
        matrix_d XQ;
        matrix_d XR;
        matrix_d XR_inv;
public:
    model_nbhd_glmm(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_nbhd_glmm(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_nbhd_glmm_namespace::model_nbhd_glmm";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 9;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 10;
            validate_non_negative_index("Y", "N", N);
            context__.validate_dims("data initialization", "Y", "int", context__.to_vec(N));
            Y = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("Y");
            pos__ = 0;
            size_t Y_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < Y_k_0_max__; ++k_0__) {
                Y[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "K", "int", context__.to_vec());
            K = int(0);
            vals_i__ = context__.vals_i("K");
            pos__ = 0;
            K = vals_i__[pos__++];
            check_greater_or_equal(function__, "K", K, 1);
            current_statement_begin__ = 12;
            validate_non_negative_index("X", "N", N);
            validate_non_negative_index("X", "K", K);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,K));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, K);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = K;
            size_t X_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N_id", "int", context__.to_vec());
            N_id = int(0);
            vals_i__ = context__.vals_i("N_id");
            pos__ = 0;
            N_id = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_id", N_id, 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("id", "N", N);
            context__.validate_dims("data initialization", "id", "int", context__.to_vec(N));
            id = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("id");
            pos__ = 0;
            size_t id_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < id_k_0_max__; ++k_0__) {
                id[k_0__] = vals_i__[pos__++];
            }
            size_t id_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < id_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "id[i_0__]", id[i_0__], 1);
            }
            current_statement_begin__ = 16;
            context__.validate_dims("data initialization", "bQ_prior_scale", "double", context__.to_vec());
            bQ_prior_scale = double(0);
            vals_r__ = context__.vals_r("bQ_prior_scale");
            pos__ = 0;
            bQ_prior_scale = vals_r__[pos__++];
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "bQ_prior_df", "int", context__.to_vec());
            bQ_prior_df = int(0);
            vals_i__ = context__.vals_i("bQ_prior_df");
            pos__ = 0;
            bQ_prior_df = vals_i__[pos__++];
            check_greater_or_equal(function__, "bQ_prior_df", bQ_prior_df, 1);
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "prior_only", "int", context__.to_vec());
            prior_only = int(0);
            vals_i__ = context__.vals_i("prior_only");
            pos__ = 0;
            prior_only = vals_i__[pos__++];
            // initialize transformed data variables
            current_statement_begin__ = 22;
            Kc = int(0);
            stan::math::fill(Kc, std::numeric_limits<int>::min());
            stan::math::assign(Kc,(K - 1));
            current_statement_begin__ = 23;
            validate_non_negative_index("Xc", "N", N);
            validate_non_negative_index("Xc", "Kc", Kc);
            Xc = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, Kc);
            stan::math::fill(Xc, DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("means_X", "Kc", Kc);
            means_X = Eigen::Matrix<double, Eigen::Dynamic, 1>(Kc);
            stan::math::fill(means_X, DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("XQ", "N", N);
            validate_non_negative_index("XQ", "Kc", Kc);
            XQ = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, Kc);
            stan::math::fill(XQ, DUMMY_VAR__);
            current_statement_begin__ = 27;
            validate_non_negative_index("XR", "Kc", Kc);
            validate_non_negative_index("XR", "Kc", Kc);
            XR = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kc, Kc);
            stan::math::fill(XR, DUMMY_VAR__);
            current_statement_begin__ = 28;
            validate_non_negative_index("XR_inv", "Kc", Kc);
            validate_non_negative_index("XR_inv", "Kc", Kc);
            XR_inv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(Kc, Kc);
            stan::math::fill(XR_inv, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 29;
            for (int i = 2; i <= K; ++i) {
                current_statement_begin__ = 30;
                stan::model::assign(means_X, 
                            stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list()), 
                            mean(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X")), 
                            "assigning variable means_X");
                current_statement_begin__ = 31;
                stan::model::assign(Xc, 
                            stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((i - 1)), stan::model::nil_index_list())), 
                            subtract(stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list())), "X"), get_base1(means_X, (i - 1), "means_X", 1)), 
                            "assigning variable Xc");
            }
            current_statement_begin__ = 34;
            stan::math::assign(XQ, multiply(qr_thin_Q(Xc), stan::math::sqrt((N - 1))));
            current_statement_begin__ = 35;
            stan::math::assign(XR, divide(qr_thin_R(Xc), stan::math::sqrt((N - 1))));
            current_statement_begin__ = 36;
            stan::math::assign(XR_inv, inverse(XR));
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 40;
            validate_non_negative_index("bQ", "Kc", Kc);
            num_params_r__ += Kc;
            current_statement_begin__ = 41;
            num_params_r__ += 1;
            current_statement_begin__ = 42;
            num_params_r__ += 1;
            current_statement_begin__ = 43;
            validate_non_negative_index("z_1", "N_id", N_id);
            num_params_r__ += N_id;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_nbhd_glmm() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 40;
        if (!(context__.contains_r("bQ")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable bQ missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("bQ");
        pos__ = 0U;
        validate_non_negative_index("bQ", "Kc", Kc);
        context__.validate_dims("parameter initialization", "bQ", "vector_d", context__.to_vec(Kc));
        Eigen::Matrix<double, Eigen::Dynamic, 1> bQ(Kc);
        size_t bQ_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < bQ_j_1_max__; ++j_1__) {
            bQ(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(bQ);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable bQ: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 41;
        if (!(context__.contains_r("Intercept")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Intercept missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Intercept");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "Intercept", "double", context__.to_vec());
        double Intercept(0);
        Intercept = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(Intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Intercept: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 42;
        if (!(context__.contains_r("sd_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sd_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sd_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sd_1", "double", context__.to_vec());
        double sd_1(0);
        sd_1 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sd_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sd_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 43;
        if (!(context__.contains_r("z_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_1");
        pos__ = 0U;
        validate_non_negative_index("z_1", "N_id", N_id);
        context__.validate_dims("parameter initialization", "z_1", "vector_d", context__.to_vec(N_id));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_1(N_id);
        size_t z_1_j_1_max__ = N_id;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            z_1(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 40;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> bQ;
            (void) bQ;  // dummy to suppress unused var warning
            if (jacobian__)
                bQ = in__.vector_constrain(Kc, lp__);
            else
                bQ = in__.vector_constrain(Kc);
            current_statement_begin__ = 41;
            local_scalar_t__ Intercept;
            (void) Intercept;  // dummy to suppress unused var warning
            if (jacobian__)
                Intercept = in__.scalar_constrain(lp__);
            else
                Intercept = in__.scalar_constrain();
            current_statement_begin__ = 42;
            local_scalar_t__ sd_1;
            (void) sd_1;  // dummy to suppress unused var warning
            if (jacobian__)
                sd_1 = in__.scalar_lb_constrain(0, lp__);
            else
                sd_1 = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 43;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_1;
            (void) z_1;  // dummy to suppress unused var warning
            if (jacobian__)
                z_1 = in__.vector_constrain(N_id, lp__);
            else
                z_1 = in__.vector_constrain(N_id);
            // model body
            current_statement_begin__ = 47;
            if (as_bool(logical_negation(prior_only))) {
                {
                current_statement_begin__ = 48;
                validate_non_negative_index("mu", "N", N);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu(N);
                stan::math::initialize(mu, DUMMY_VAR__);
                stan::math::fill(mu, DUMMY_VAR__);
                stan::math::assign(mu,add(add(Intercept, multiply(XQ, bQ)), multiply((20.0 * sd_1), stan::model::rvalue(z_1, stan::model::cons_list(stan::model::index_multi(id), stan::model::nil_index_list()), "z_1"))));
                current_statement_begin__ = 49;
                stan::math::assign(mu, inv_cloglog(mu));
                current_statement_begin__ = 50;
                lp_accum__.add(bernoulli_log<propto__>(Y, mu));
                }
            }
            current_statement_begin__ = 53;
            lp_accum__.add(student_t_log<propto__>(Intercept, 3, 0, 2.5));
            current_statement_begin__ = 54;
            lp_accum__.add(student_t_log<propto__>(bQ, bQ_prior_df, 0, bQ_prior_scale));
            current_statement_begin__ = 56;
            lp_accum__.add(gamma_log<propto__>(sd_1, 2.0, 2.0));
            current_statement_begin__ = 57;
            lp_accum__.add(std_normal_log<propto__>(z_1));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("bQ");
        names__.push_back("Intercept");
        names__.push_back("sd_1");
        names__.push_back("z_1");
        names__.push_back("b");
        names__.push_back("b_Intercept");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(Kc);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_id);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Kc);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_nbhd_glmm_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> bQ = in__.vector_constrain(Kc);
        size_t bQ_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < bQ_j_1_max__; ++j_1__) {
            vars__.push_back(bQ(j_1__));
        }
        double Intercept = in__.scalar_constrain();
        vars__.push_back(Intercept);
        double sd_1 = in__.scalar_lb_constrain(0);
        vars__.push_back(sd_1);
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_1 = in__.vector_constrain(N_id);
        size_t z_1_j_1_max__ = N_id;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            vars__.push_back(z_1(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 62;
            validate_non_negative_index("b", "Kc", Kc);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b(Kc);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            stan::math::assign(b,multiply(XR_inv, bQ));
            current_statement_begin__ = 64;
            double b_Intercept;
            (void) b_Intercept;  // dummy to suppress unused var warning
            stan::math::initialize(b_Intercept, DUMMY_VAR__);
            stan::math::fill(b_Intercept, DUMMY_VAR__);
            stan::math::assign(b_Intercept,(Intercept - dot_product(means_X, b)));
            // validate, write generated quantities
            current_statement_begin__ = 62;
            size_t b_j_1_max__ = Kc;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                vars__.push_back(b(j_1__));
            }
            current_statement_begin__ = 64;
            vars__.push_back(b_Intercept);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_nbhd_glmm";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t bQ_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < bQ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bQ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_1";
        param_names__.push_back(param_name_stream__.str());
        size_t z_1_j_1_max__ = N_id;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t b_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_Intercept";
        param_names__.push_back(param_name_stream__.str());
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t bQ_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < bQ_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bQ" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "Intercept";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sd_1";
        param_names__.push_back(param_name_stream__.str());
        size_t z_1_j_1_max__ = N_id;
        for (size_t j_1__ = 0; j_1__ < z_1_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_1" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
        size_t b_j_1_max__ = Kc;
        for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "b_Intercept";
        param_names__.push_back(param_name_stream__.str());
    }
}; // model
}  // namespace
typedef model_nbhd_glmm_namespace::model_nbhd_glmm stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
